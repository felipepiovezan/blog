(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{109:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/to_build-0d6248ba189757534ec7202841cbce45.svg"},110:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/locations-8542605038e8cd4246e749b5cb628d93.svg"},111:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/in_source-8436cf973596b130d23bdae9b2e62f00.svg"},112:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/out_of_source-e65cadf423364a34fe3cefe27b4eaea9.svg"},113:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/different_systems-f4fa545d2d335fc9a284fa3d1b0db211.svg"},52:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var i=n(2),a=n(6),o=(n(0),n(69)),r={title:"Build system basics",slug:"../build_system_basics"},s={unversionedId:"20200127-build_systems1/README",id:"20200127-build_systems1/README",isDocsHomePage:!1,title:"Build system basics",description:"Having a build system in a project is something many developers take for",source:"@site/docs/20200127-build_systems1/README.md",slug:"/build_system_basics",permalink:"/build_system_basics",version:"current",sidebar:"someSidebar",previous:{title:"Build system basics - part 2",permalink:"/build_system_p2"},next:{title:"Topological sorting - ACM-ICPC",permalink:"/improve_spam"}},l=[{value:"To build",id:"to-build",children:[]},{value:"A wrong way to build",id:"a-wrong-way-to-build",children:[]},{value:"A cleaner approach",id:"a-cleaner-approach",children:[]},{value:"Systematically building",id:"systematically-building",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],c={rightToc:l};function b(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Having a build system in a project is something many developers take for\ngranted, never paying attention to the work involved in maintaining the build's\nquality and health. Can we identify whether a build system is good or not?"),Object(o.b)("p",null,"During my first years as a software engineer, I would feel like there was\nsomething wrong with the way we built our project; but being my first job and\nbeing mostly ignorant on build systems, I assumed we did things right. Until I\ndecided to study a bit on the topic - oh was I wrong."),Object(o.b)("p",null,"This post is meant as a high level introduction to building C++ software."),Object(o.b)("h2",{id:"to-build"},"To build"),Object(o.b)("p",null,"On a high level, building a project is a two-step process: first, a set of\nbuild files is converted into build artifacts. Then, a subset of those build\nartifacts is moved into some installation directory."),Object(o.b)("p",null,Object(o.b)("img",{alt:"example 1",src:n(109).default})),Object(o.b)("p",null,"The first step is where the compiler and linker are involved, doing most of the\nwork. But a lot more can happen in this stage, like running scripts to generate\ncode, creating test inputs, generating documentation, etc."),Object(o.b)("p",null,"In the second step, some build artifacts are moved into an installation\ndirectory, making the project available to anyone in the system. It's possible\nfor developers to skip the installation step when developing, because\ndevelopers can execute all components of the project using the build\nartifacts alone."),Object(o.b)("p",null,"In the steps above, we have identified three important directories:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Source directory, where the source files are located."),Object(o.b)("li",{parentName:"ol"},"Build directory, where the build artifacts are placed."),Object(o.b)("li",{parentName:"ol"},"Install directory, where the installed program is placed.")),Object(o.b)("p",null,Object(o.b)("img",{alt:"example 2",src:n(110).default})),Object(o.b)("h2",{id:"a-wrong-way-to-build"},"A wrong way to build"),Object(o.b)("p",null,"In some build methods, the source directory and the build directory are the\nsame, this is known as an ",Object(o.b)("strong",{parentName:"p"},"in-source build"),":"),Object(o.b)("p",null,Object(o.b)("img",{alt:"example 3",src:n(111).default})),Object(o.b)("p",null,"In other words, source code, scripts and test inputs are all in the same\ndirectory as object files, script-generated code, compiled libraries and\nexecutables, automatically generated documentation, etc."),Object(o.b)("p",null,"Let's pause here for a moment and consider the implications of this build\nmethod:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"The version control system has to distinguish between files that should be\ncommitted and files that are build artifacts."),Object(o.b)("li",{parentName:"ol"},"Because the build process places files in the same directory where source\ncode is located, it needs special care not to overwrite or delete important\nfiles",Object(o.b)("sup",{parentName:"li",id:"fnref-1"},Object(o.b)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),"."),Object(o.b)("li",{parentName:"ol"},"Cleaning a build (deleting all build artifacts) becomes a non-trivial task."),Object(o.b)("li",{parentName:"ol"},"Sharing the same source files for independent builds becomes non-trivial\n(more on this later).")),Object(o.b)("p",null,"Note that it's possible to overcome each of those problems at the cost of added\ncomplexity. However, when striving for simplicity, we must ask if there are\nsimpler ways of achieving the goals above; the answer is yes."),Object(o.b)("h2",{id:"a-cleaner-approach"},"A cleaner approach"),Object(o.b)("p",null,"The build method in which the source and build directories are distinct is\ncalled an ",Object(o.b)("strong",{parentName:"p"},"out-of-source")," build. The complete separation between source files\nand build artifacts makes for a simpler and more practical organization of the\nproject:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"A file is under version control if and only if it is inside the source\ndirectory."),Object(o.b)("li",{parentName:"ol"},"The build process only ever outputs files to the build directory, therefore\nthere is no risk of changing the source material."),Object(o.b)("li",{parentName:"ol"},"Cleaning a build is simple: ",Object(o.b)("inlineCode",{parentName:"li"},"rm -r <build_directory>"),"."),Object(o.b)("li",{parentName:"ol"},"Because the source directory is not aware of the build directory, the same\nsource can ",Object(o.b)("em",{parentName:"li"},"easily")," be used for multiple builds.")),Object(o.b)("p",null,"This last point is so important that it deserves elaborating. Let's imagine a\nscenario where we have to develop an application on both Windows and Linux.  We\ncan place the source directory in network storage, and maintain build\ndirectories in the local (faster) storage of each system. One build does not\naffect the other by design."),Object(o.b)("p",null,"Suppose that building on debug mode is expensive, so we don't want to do it all\nthe time. When we want debug mode because of a faulty change, we simply create\nanother build directory, configure it to debug, and build. There is no need to\nclone the repository and to apply the faulty changes on top of the new copy."),Object(o.b)("p",null,"Suppose that we want to compare the performance of an application when built\nwith two different compilers. We simply keep two distinct build directories,\none for each compiler."),Object(o.b)("p",null,Object(o.b)("img",{alt:"example 4",src:n(112).default})),Object(o.b)("h2",{id:"systematically-building"},"Systematically building"),Object(o.b)("p",null,"We've talked about what it means to build software, but this article started\ntalking about build ",Object(o.b)("strong",{parentName:"p"},"systems"),". What is a build system?"),Object(o.b)("p",null,"A build system is a description of how to build a particular software, combined\nwith a program that reads this description and acts upon it. Here's the world's\nsimplest build system:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"#build.sh\n\ngcc main.cpp -o main\ncp main /usr/local/bin/main\n")),Object(o.b)("p",null,"In this example, our build system is a simple shell script that, when invoked,\ncompiles ",Object(o.b)("inlineCode",{parentName:"p"},"main.cpp")," and installs the generated executable ",Object(o.b)("inlineCode",{parentName:"p"},"main")," into\n",Object(o.b)("inlineCode",{parentName:"p"},"/usr/local/bin"),Object(o.b)("sup",{parentName:"p",id:"fnref-2"},Object(o.b)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2")),". It is an example of an in-source build. A better example\nwould be:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"#build.sh\n\nmkdir $BUILD_DIRECTORY\ngcc main.cpp -o $BUILD_DIRECTORY/main\ncp $BUILD_DIRECTORY/main $INSTALL_DIRECTORY/bin/main\n")),Object(o.b)("p",null,"The new script can be invoked multiple times, with different values for\n",Object(o.b)("inlineCode",{parentName:"p"},"BUILD_DIRECTORY")," and ",Object(o.b)("inlineCode",{parentName:"p"},"INSTALL_DIRECTORY"),". This is an example of an\nout-of-source build."),Object(o.b)("p",null,"There are many build systems out there, but they all follow this pattern: a\nfile that describes the build process using some language is placed in the\nsource directory, and a program is invoked to read that description and build\nthe project."),Object(o.b)("p",null,"Some examples: ",Object(o.b)("inlineCode",{parentName:"p"},"make")," uses ",Object(o.b)("inlineCode",{parentName:"p"},"Makefile"),", ",Object(o.b)("inlineCode",{parentName:"p"},"ninja")," uses ",Object(o.b)("inlineCode",{parentName:"p"},"build.ninja"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Xcode")," uses\n",Object(o.b)("inlineCode",{parentName:"p"},".pbxproj"),", ",Object(o.b)("inlineCode",{parentName:"p"},"MSVC")," uses ",Object(o.b)("inlineCode",{parentName:"p"},"vscxxproj"),", etc."),Object(o.b)("p",null,Object(o.b)("img",{alt:"example 4",src:n(113).default})),Object(o.b)("p",null,"It is the build system's job to:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Figure out how to run code generation scripts."),Object(o.b)("li",{parentName:"ul"},"Find header files."),Object(o.b)("li",{parentName:"ul"},"Find external dependencies."),Object(o.b)("li",{parentName:"ul"},"Move files around."),Object(o.b)("li",{parentName:"ul"},"Determine the order in which build steps must happen."),Object(o.b)("li",{parentName:"ul"},"Determine which steps can be done in parallel."),Object(o.b)("li",{parentName:"ul"},"Determine where to find tools like the compiler."),Object(o.b)("li",{parentName:"ul"},"Understand how the compiler is invoked.")),Object(o.b)("p",null,'Depending on the expressiveness of the build system\'s language, the programmer\nmight have to perform a lot of "hand-holding" for some or all of the steps\nabove. In other words, the build description file might allow for higher level\nabstractions and be easy to reason about, or it might require low level\ncommands to be spelled out (as the shell example showed).'),Object(o.b)("p",null,"Each build system has its own view on how to achieve those features. Is it\npossible to get all of them and still be operating system agnostic? For the C++\ncase, that's what CMake aims to do and we will explore how it does that in a\nfuture article."),Object(o.b)("h2",{id:"conclusion"},"Conclusion"),Object(o.b)("p",null,"Given all that we've discussed, it's possible to identify symptoms of a bad\nbuild system:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"How easy is it to spawn a second build from the same source directory?"),Object(o.b)("li",{parentName:"ol"},"How easy is it to identify files that must be under version control?"),Object(o.b)("li",{parentName:"ol"},"Can you identify the compiler that is used in a given build? How easily can\nthat be changed?"),Object(o.b)("li",{parentName:"ol"},"Can you build a single component of the project and its dependencies,\nwithout building anything unnecessary?"),Object(o.b)("li",{parentName:"ol"},"If a source file is changed, how easy is it to incrementally build the\naffected components?")),Object(o.b)("p",null,"A good build system will also allow you to reason about individual components\nof your project and how they relate to each other, so that you can easily\nidentify circular dependencies, or add new components with the correct\ndependencies."),Object(o.b)("p",null,"Furthermore, a good build system is capable of inferring a lot of information\ngiven a description of the project. For instance, it should be able to find\nsystem libraries, understand how to invoke the compiler and automatically infer\nparallelism between build steps."),Object(o.b)("p",null,"From the number of times I wrote ",Object(o.b)("em",{parentName:"p"},"easily")," in the text above, you can tell how\nmuch I value simplicity. When things are complicated, few developers know how\nto maintain a healthy build, and the build quality slowly deteriorates."),Object(o.b)("p",null,"Once enough components are added, the project reaches a point where no one\ntruly understands the dependencies between components, how to fix build breaks,\nor how to reduce the number of components built as result of dependencies. The\nconsequence is a generalized loss in productivity as developers have to context\nswitch while wainting for the subpar build."),Object(o.b)("p",null,"Thanks for reading! Next time we'll talk about how CMake accomplishes most of\nthe goals we talked about. In the meantime, try to identify how good the build\nsystem of your project is."),Object(o.b)("p",null,"edit: ",Object(o.b)("a",{parentName:"p",href:"http://felipepiovezan.gitlab.io/blog/build_system_p2/"},"Part 2")," is out!"),Object(o.b)("div",{className:"footnotes"},Object(o.b)("hr",{parentName:"div"}),Object(o.b)("ol",{parentName:"div"},Object(o.b)("li",{parentName:"ol",id:"fn-1"},"If one has used Perforce as a version control system, one could argue\nthat Perforce is so great it prevents the aforementioned issue from happening.\nPlease don't use an objectively wrong build methodology as an excuse to use an\nobjectively bad (and expensive) version control system.",Object(o.b)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),Object(o.b)("li",{parentName:"ol",id:"fn-2"},"Note that ",Object(o.b)("inlineCode",{parentName:"li"},"/usr/local/bin")," is probably a write-protected directory. As\nsuch, sudo permissions might be needed to run this script.",Object(o.b)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")))))}b.isMDXComponent=!0},69:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var i=n(0),a=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=b(n),p=i,m=d["".concat(r,".").concat(p)]||d[p]||u[p]||o;return n?a.a.createElement(m,s(s({ref:t},c),{},{components:n})):a.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);