(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{116:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/system_gen-5dd5634ecfc61e1400114ce825d42a5a.svg"},117:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/dot_graph-b6699569c28727b7b43b1bae925e77e1.svg"},61:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return b}));var n=a(2),r=a(6),i=(a(0),a(69)),o={title:"Build system basics - part 2"},l={unversionedId:"20200222-build_systems2/README",id:"20200222-build_systems2/README",isDocsHomePage:!1,title:"Build system basics - part 2",description:"[Part 1] discussed a few basic concepts related to build systems. Part 2",source:"@site/docs/20200222-build_systems2/README.md",slug:"/20200222-build_systems2/README",permalink:"/20200222-build_systems2/README",version:"current",sidebar:"someSidebar",previous:{title:"Static variables, static storage, static initialization, constant initialization, constinit, constexpr",permalink:"/20200306-static_var/README"},next:{title:"Build system basics",permalink:"/20200127-build_systems1/README"}},s=[{value:"CMake is not a build system.",id:"cmake-is-not-a-build-system",children:[]},{value:"The canonical CMake invocation",id:"the-canonical-cmake-invocation",children:[]},{value:"CMakeLists.txt files",id:"cmakeliststxt-files",children:[]},{value:"The CMake language",id:"the-cmake-language",children:[{value:"Strings, string everywhere!",id:"strings-string-everywhere",children:[]},{value:"Go crazy",id:"go-crazy",children:[]},{value:"A word on whitespaces",id:"a-word-on-whitespaces",children:[]}]},{value:"Targets",id:"targets",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Visual representation",id:"visual-representation",children:[]},{value:"Conclusion",id:"conclusion",children:[]},{value:"Further reading",id:"further-reading",children:[]}],c={rightToc:s};function b(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,o,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://felipepiovezan.gitlab.io/blog/build_system_basics/"}),"Part 1")," discussed a few basic concepts related to build systems. Part 2\nfocuses on how one can use CMake to accomplish the goals described in Part 1."),Object(i.b)("p",null,"There are ",Object(i.b)("strong",{parentName:"p"},"many")," good CMake tutorials out there, but their aim is usually to\nteach through practical examples. As part 1 demonstrated, I want to take a more\nfundamental approach, and focus on the concepts rather than on their\nimplementation or detailed explanations about particular CMake functions. Once\nthe fundamentals are understood, other tutorials, talks and documentation will\nmake a lot more sense. I will link some useful resources that can be used to\ntake this to the next level."),Object(i.b)("p",null,"The first order of business is to clarify a small lie that has been told."),Object(i.b)("h2",{id:"cmake-is-not-a-build-system"},"CMake is not a build system."),Object(i.b)("p",null,"Strictly speaking, CMake is a build system ",Object(i.b)("em",{parentName:"p"},"generator"),". In other words, CMake\nreads the project description and, instead of building the project, it simply\ngenerates build description files for a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#cmake-generators"}),"build system of your choice"),". In other\nwords, CMake by itself is not enough to build a project."),Object(i.b)("p",null,Object(i.b)("img",{alt:"example 1",src:a(116).default})),Object(i.b)("p",null,"As the picture shows, CMake will place the build system description file\n(Makefile, build.ninja, etc) inside the ",Object(i.b)("em",{parentName:"p"},"build directory"),". It might seem odd at\nfirst, but it makes sense if one views the build system as a property of a\nparticular build, not as a property of the project itself. For example, a build\non Windows will likely use a different build system than a build on Mac."),Object(i.b)("p",null,"Consider, for instance, a project based exclusively on the ninja system. A\nWindows developer who wants to work on this project and use Visual Studio would\nhave to hope Visual Studio has support for Ninja. The same applies for\nMac/Xcode, or any other platform. Alternatively, the project can use CMake and\ngenerate native Visual Studio / Xcode build descriptions for those builds."),Object(i.b)("h2",{id:"the-canonical-cmake-invocation"},"The canonical CMake invocation"),Object(i.b)("p",null,"To start a CMake-based build, gather the following information:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"The source directory path, ",Object(i.b)("inlineCode",{parentName:"li"},"$SOURCE_DIRECTORY"),"."),Object(i.b)("li",{parentName:"ol"},"The build directory path, ",Object(i.b)("inlineCode",{parentName:"li"},"$BUILD_DIRECTORY"),"."),Object(i.b)("li",{parentName:"ol"},"The desired build system, ",Object(i.b)("inlineCode",{parentName:"li"},"$BUILD_SYSTEM"),". (",Object(i.b)("inlineCode",{parentName:"li"},"Ninja"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Unix Makefiles"),", etc)")),Object(i.b)("p",null,"Then, run:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"cd $BUILD_DIRECTORY\ncmake [-G $BUILD_SYSTEM] $SOURCE_DIRECTORY\n")),Object(i.b)("p",null,"Those steps generate the required files inside the build directory. To build,\neither run the build system specific command inside the build directory\n(",Object(i.b)("inlineCode",{parentName:"p"},"make"),", ",Object(i.b)("inlineCode",{parentName:"p"},"ninja"),", etc) or let CMake abstract this in a system-agnostic way:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"cmake --build $BUILD_DIRECTORY\n")),Object(i.b)("h2",{id:"cmakeliststxt-files"},"CMakeLists.txt files"),Object(i.b)("p",null,"A CMake-based project will contain many CMakeLists.txt files throughout its\ndirectory hierarchy. These files contain a description of each module\n(",Object(i.b)("em",{parentName:"p"},"target"),") in the project and their relationship (",Object(i.b)("em",{parentName:"p"},"properties"),"); it is the\nprogrammer's goal to express those ideas as cleanly as possible using the\n",Object(i.b)("em",{parentName:"p"},"CMake language"),"."),Object(i.b)("h2",{id:"the-cmake-language"},"The CMake language"),Object(i.b)("p",null,"The CMake language is just a programming language, it has functions, loops,\nconditionals, etc.  It also has its quirks and oddities. Like any language, it\nis merely a tool to express intent, and getting the basics right is crucial to\nwriting expressive code."),Object(i.b)("p",null,"It's impossible to fully describe the language in a blog, but there is one key\nconcept that needs to be explained."),Object(i.b)("h3",{id:"strings-string-everywhere"},"Strings, string everywhere!"),Object(i.b)("p",null,"In the CMake language, almost everything is a string. The contents of a\nvariable is a string, the variable name itself is a string. Here's how one\nwould write an assignment command:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-CMake"}),"set(my_var hello)\n")),Object(i.b)("p",null,'The mental model I use when thinking about the CMake language is that\n"assignment to a variable creates a map from a string to another". In other\nwords:'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c++"}),'map["my_var"] = "hello";\n')),Object(i.b)("p",null,"Dereferencing a variable is done with the ",Object(i.b)("inlineCode",{parentName:"p"},"${}")," operator:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-CMake"}),"${my_var}\n")),Object(i.b)("p",null,"We can think of it simply querying the map:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-c++"}),'map["my_var"]\n')),Object(i.b)("h3",{id:"go-crazy"},"Go crazy"),Object(i.b)("p",null,"Convince yourself you understand what these lines are doing:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-CMake"}),"set(hello_str hello)                 # map[\u201chello_str\u201d] = \u201chello\u201d\nset(world_str world)                 # map[\u201cworld_str\u201d] = \u201cworld\u201d\nset(helloworld \u201cHello world!\u201d)       # map[\u201chelloworld\u201d] = \u201cHello world!\u201d\n${hello_str}                         # Queries map[\u201chello_str\u201d] finds \u201chello\u201d\n${${hello_str}}                      # Queries map[\u201chello\u201d]... empty!\n${${hello_str}${world_str}}          # Queries map[\u201chelloworld\u201d] finds \u201cHello world!\u201d\n")),Object(i.b)("h3",{id:"a-word-on-whitespaces"},"A word on whitespaces"),Object(i.b)("p",null,"Whitespaces separating two strings cause those strings to be interpreted as a\nlist, internally represented as a semicolon-separated concatenation of the\nstrings."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-CMake"}),"set(my_var hello world)              # map[\u201cmy_var\u201d] = \u201chello;world\u201d\nset(my_var hello;world)              # same as above.\nset(my_var \u201chello world\u201d)            # map[\u201cmy_var\u201d] = \u201chello world\u201d\n")),Object(i.b)("h2",{id:"targets"},"Targets"),Object(i.b)("p",null,"In CMake, a ",Object(i.b)("inlineCode",{parentName:"p"},"target")," is anything one wants to build. It is typically an\nexecutable or a library, but it's possible to define any custom set of\ncommands."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-CMake"}),"add_executable(\n  executable1\n    executable1_source.cpp\n)\n\nadd_library(\n  library1\n    library1_source.cpp\n)\n")),Object(i.b)("h2",{id:"properties"},"Properties"),Object(i.b)("p",null,"Properties provide information on ",Object(i.b)("inlineCode",{parentName:"p"},"targets"),". There are three flavors of properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Private: information about ",Object(i.b)("strong",{parentName:"li"},"how")," the target does something. Other targets\nneed not be aware of private properties."),Object(i.b)("li",{parentName:"ul"},"Interface: information about ",Object(i.b)("strong",{parentName:"li"},"what")," the target does. Other targets need to\nknow about interfaces."),Object(i.b)("li",{parentName:"ul"},"Public: information that is both private and on the interface.")),Object(i.b)("p",null,"Let's look at one such property: include directories. This specifies include\npaths the compiler should use when looking for header files."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-CMake"}),"target_include_directories(\n  library1\n    PRIVATE /my/private/path\n    PUBLIC /my/public/path\n)\n")),Object(i.b)("p",null,"Note the two distinct paths specified above. The ",Object(i.b)("inlineCode",{parentName:"p"},"PRIVATE")," path will not be\nvisible to any other targets using ",Object(i.b)("inlineCode",{parentName:"p"},"my_lib1"),", whereas the ",Object(i.b)("inlineCode",{parentName:"p"},"PUBLIC")," path will.\nTo understand this, let's look at the link libraries property:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-CMake"}),"target_link_libraries(\n  executable1\n    PRIVATE library1\n)\n")),Object(i.b)("p",null,"This expresses that ",Object(i.b)("inlineCode",{parentName:"p"},"executable1")," needs to be linked against ",Object(i.b)("inlineCode",{parentName:"p"},"library1"),".\nFurthermore, ",Object(i.b)("inlineCode",{parentName:"p"},"executable1")," also depends privately on everything that is part of\n",Object(i.b)("inlineCode",{parentName:"p"},"library1"),"'s interface. In particular, the ",Object(i.b)("inlineCode",{parentName:"p"},"/my/public/path")," include path will\nalso be visible to ",Object(i.b)("inlineCode",{parentName:"p"},"executable1"),"."),Object(i.b)("h2",{id:"visual-representation"},"Visual representation"),Object(i.b)("p",null,"Targets are the building blocks of a CMake project description and properties\ntell CMake how to build targets. Linking targets cause properties to flow from\none target to another transitively and create dependencies that define an order\nin which actions must happen at build time."),Object(i.b)("p",null,"The dependency between targets and the flow of properties can be visualized by\npassing ",Object(i.b)("inlineCode",{parentName:"p"},"--graphviz=<some_prefix>")," to the CMake command call. It will cause\nCMake to generate a DOT graph file that can be plotted to generate something\nlike this:"),Object(i.b)("p",null,Object(i.b)("img",{alt:"example 2",src:a(117).default})),Object(i.b)("p",null,"If you can (easily) produce such a graph for your project, you have a clear\nunderstanding of the project as a whole."),Object(i.b)("h2",{id:"conclusion"},"Conclusion"),Object(i.b)("p",null,"At the end of part 1, we concluded by listing some symptoms of bad build systems.\nLet's see how a CMake-based project handles those issues."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"How easy is it to spawn a second build from the same source directory?")),Object(i.b)("p",null,"Simply create a new empty build directory and rerun the CMake configure command."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"How easy is it to identify files that must be under version control?")),Object(i.b)("p",null,"A file must be under version control if and only if it is inside the source\ndirectory."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Can you identify the compiler that is used in a given build? How easily can\nthat be changed?")),Object(i.b)("p",null,"The CMake command prints out the C and C++ compilers detected as part of the\nconfigure command. A different compiler may be used by passing extra flags to\nthe configure command: ",Object(i.b)("inlineCode",{parentName:"p"},"-DCMAKE_CXX_COMPILER=path/to/c++/compiler")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"-DCMAKE_C_COMPILER=path/to/c/compiler"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"cmake-gui")," tool (shipped with CMake)\nallows inspection of the current configuration of a given build directory."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Can you build a single component of the project and its dependencies,\nwithout building anything unnecessary?")),Object(i.b)("p",null,"Yes, just run ",Object(i.b)("inlineCode",{parentName:"p"},"cmake --build $BUILD_DIRECTORY --target <target_name>"),"."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"If a source file is changed, how easy is it to incrementally build the\naffected components?")),Object(i.b)("p",null,"Simply rerun ",Object(i.b)("inlineCode",{parentName:"p"},"cmake --build $BUILD_DIRECTORY"),"."),Object(i.b)("hr",null),Object(i.b)("p",null,"Here I stop, having taken you from the basics of building to the fundamentals\nof CMake, with the hopes that you'll find other tutorials much more palatable\nthan they were for me. There are suggestions below if you want to continue your\njourney on this world of building software; knowing how to build existing\nprojects and how to start new ones is a useful skill to have. If you want to\nstop, I don't blame you. It is no easy road."),Object(i.b)("hr",null),Object(i.b)("h2",{id:"further-reading"},"Further reading"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://cmake.org/cmake/help/v3.17/"}),"CMake documentation")," is really good and comprehensive, I use it a lot\nand it rarely disappoints. Learn how to navigate this and interpret the docs\nand you'll be able to understand new commands and functions much faster (this\nis a general advice for any software). For example, read the ",Object(i.b)("em",{parentName:"p"},"Normal libraries"),"\nsection of the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://cmake.org/cmake/help/latest/command/add_library.html#normal-libraries"}),"add","_","library")," documentation, a command we used in this\ntutorial.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'The "official" ',Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://cmake.org/cmake/help/latest/guide/tutorial/index.html"}),"CMake tutorial")," covers a ",Object(i.b)("strong",{parentName:"p"},"lot")," of material. As such, it is\na good way to survey everything that can be done with CMake, without going into\ntoo much detail. You should be able to follow it having read these two blog\nposts.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Craig Scott's ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://crascit.com/professional-cmake/"}),"Professional CMake")," book is great both as a learning tool\nand as a reference. Whenever I find myself thinking ",Object(i.b)("em",{parentName:"p"},"How do I do X again?")," or\n",Object(i.b)("em",{parentName:"p"},"I'm sure there is a better way to this"),", this book comes to the rescue.  It\nwas also my primary way to learn about CMake.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Daniel Pfeifer's ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.youtube.com/watch?v=bsXLMQ6WgIk"}),"Effective CMake")," talk is a good introduction to the CMake\nlanguage and to good CMake practices. The second half of the talk is pretty\nheavy on details though, so don't worry too much about it right now."))))}b.isMDXComponent=!0},69:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(a),d=n,h=p["".concat(o,".").concat(d)]||p[d]||u[d]||i;return a?r.a.createElement(h,l(l({ref:t},c),{},{components:a})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);